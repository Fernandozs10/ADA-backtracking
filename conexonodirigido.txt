#include <iostream>
#include <vector>

using namespace std;

void dfs(vector<vector<int>>& grafo, vector<bool>& visitado, int v) {
    visitado[v] = true;

    for (int vecino : grafo[v]) {
        if (!visitado[vecino]) {
            dfs(grafo, visitado, vecino);
        }
    }
}

bool es_conexo(vector<vector<int>>& grafo) {
    int n = grafo.size();

    vector<bool> visitado(n, false);

    dfs(grafo, visitado, 0);  // Comenzar el recorrido DFS desde el vértice 0

    // Verificar si todos los vértices fueron visitados
    for (bool v : visitado) {
        if (!v) {
            return false;  // No se pudo llegar a algún vértice, el grafo no es conexo
        }
    }

    return true;  // Se visitaron todos los vértices, el grafo es conexo
}

int main() {
    int n = 6;  // Número de vértices del grafo

    vector<vector<int>> grafo(n);  // Lista de adyacencia para representar el grafo

    // Agregar aristas al grafo
    grafo[0] = {1, 2};
    grafo[1] = {0, 3};
    grafo[2] = {0, 4};
    grafo[3] = {1, 4, 5};
    grafo[4] = {2, 3};
    grafo[5] = {3};

    if (es_conexo(grafo)) {
        cout << "El grafo es conexo." << endl;
    } else {
        cout << "El grafo no es conexo." << endl;
    }

    return 0;
}
